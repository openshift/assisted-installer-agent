// Code generated by mockery v2.9.6. DO NOT EDIT.

package dhcp_lease_allocate

import (
	fs "io/fs"

	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"

	net "net"

	netlink "github.com/vishvananda/netlink"
)

// MockDependencies is an autogenerated mock type for the Dependencies type
type MockDependencies struct {
	mock.Mock
}

// Execute provides a mock function with given fields: command, args
func (_m *MockDependencies) Execute(command string, args ...string) (string, string, int) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(command, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, ...string) string); ok {
		r1 = rf(command, args...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string, ...string) int); ok {
		r2 = rf(command, args...)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetLastLeaseFromFile provides a mock function with given fields: log, fileName
func (_m *MockDependencies) GetLastLeaseFromFile(log logrus.FieldLogger, fileName string) (string, string, error) {
	ret := _m.Called(log, fileName)

	var r0 string
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger, string) string); ok {
		r0 = rf(log, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger, string) string); ok {
		r1 = rf(log, fileName)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(logrus.FieldLogger, string) error); ok {
		r2 = rf(log, fileName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LeaseInterface provides a mock function with given fields: log, masterDevice, name, mac
func (_m *MockDependencies) LeaseInterface(log logrus.FieldLogger, masterDevice string, name string, mac net.HardwareAddr) (*net.Interface, error) {
	ret := _m.Called(log, masterDevice, name, mac)

	var r0 *net.Interface
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger, string, string, net.HardwareAddr) *net.Interface); ok {
		r0 = rf(log, masterDevice, name, mac)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*net.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger, string, string, net.HardwareAddr) error); ok {
		r1 = rf(log, masterDevice, name, mac)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkByName provides a mock function with given fields: name
func (_m *MockDependencies) LinkByName(name string) (netlink.Link, error) {
	ret := _m.Called(name)

	var r0 netlink.Link
	if rf, ok := ret.Get(0).(func(string) netlink.Link); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(netlink.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkDel provides a mock function with given fields: link
func (_m *MockDependencies) LinkDel(link netlink.Link) error {
	ret := _m.Called(link)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link) error); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MkdirAll provides a mock function with given fields: path, perm
func (_m *MockDependencies) MkdirAll(path string, perm fs.FileMode) error {
	ret := _m.Called(path, perm)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(path, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadFile provides a mock function with given fields: filename
func (_m *MockDependencies) ReadFile(filename string) ([]byte, error) {
	ret := _m.Called(filename)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteFile provides a mock function with given fields: filename, data, perm
func (_m *MockDependencies) WriteFile(filename string, data []byte, perm fs.FileMode) error {
	ret := _m.Called(filename, data, perm)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, fs.FileMode) error); ok {
		r0 = rf(filename, data, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockDependencies interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDependencies creates a new instance of MockDependencies. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDependencies(t mockConstructorTestingTNewMockDependencies) *MockDependencies {
	mock := &MockDependencies{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
