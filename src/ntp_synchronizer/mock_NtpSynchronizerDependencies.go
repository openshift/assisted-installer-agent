// Code generated by mockery v2.9.6. DO NOT EDIT.

package ntp_synchronizer

import mock "github.com/stretchr/testify/mock"

// MockNtpSynchronizerDependencies is an autogenerated mock type for the NtpSynchronizerDependencies type
type MockNtpSynchronizerDependencies struct {
	mock.Mock
}

// ExecutePrivileged provides a mock function with given fields: command, args
func (_m *MockNtpSynchronizerDependencies) ExecutePrivileged(command string, args ...string) (string, string, int) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(command, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, ...string) string); ok {
		r1 = rf(command, args...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string, ...string) int); ok {
		r2 = rf(command, args...)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// LookupAddr provides a mock function with given fields: addr
func (_m *MockNtpSynchronizerDependencies) LookupAddr(addr string) ([]string, error) {
	ret := _m.Called(addr)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupHost provides a mock function with given fields: host
func (_m *MockNtpSynchronizerDependencies) LookupHost(host string) ([]string, error) {
	ret := _m.Called(host)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(host)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockNtpSynchronizerDependencies interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockNtpSynchronizerDependencies creates a new instance of MockNtpSynchronizerDependencies. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockNtpSynchronizerDependencies(t mockConstructorTestingTNewMockNtpSynchronizerDependencies) *MockNtpSynchronizerDependencies {
	mock := &MockNtpSynchronizerDependencies{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
