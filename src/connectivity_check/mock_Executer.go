// Code generated by mockery v2.9.6. DO NOT EDIT.

package connectivity_check

import mock "github.com/stretchr/testify/mock"

// MockExecuter is an autogenerated mock type for the Executer type
type MockExecuter struct {
	mock.Mock
}

// Execute provides a mock function with given fields: command, args
func (_m *MockExecuter) Execute(command string, args ...string) (string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(command, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(command, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockExecuter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockExecuter creates a new instance of MockExecuter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockExecuter(t mockConstructorTestingTNewMockExecuter) *MockExecuter {
	mock := &MockExecuter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
