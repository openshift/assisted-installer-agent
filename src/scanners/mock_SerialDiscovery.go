// Code generated by mockery v2.9.6. DO NOT EDIT.

package scanners

import (
	baseboard "github.com/jaypipes/ghw/pkg/baseboard"
	mock "github.com/stretchr/testify/mock"

	option "github.com/jaypipes/ghw/pkg/option"

	product "github.com/jaypipes/ghw/pkg/product"
)

// MockSerialDiscovery is an autogenerated mock type for the SerialDiscovery type
type MockSerialDiscovery struct {
	mock.Mock
}

// Baseboard provides a mock function with given fields: opts
func (_m *MockSerialDiscovery) Baseboard(opts ...*option.Option) (*baseboard.Info, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *baseboard.Info
	if rf, ok := ret.Get(0).(func(...*option.Option) *baseboard.Info); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baseboard.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...*option.Option) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Product provides a mock function with given fields: opts
func (_m *MockSerialDiscovery) Product(opts ...*option.Option) (*product.Info, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *product.Info
	if rf, ok := ret.Get(0).(func(...*option.Option) *product.Info); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...*option.Option) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockSerialDiscovery interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSerialDiscovery creates a new instance of MockSerialDiscovery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSerialDiscovery(t mockConstructorTestingTNewMockSerialDiscovery) *MockSerialDiscovery {
	mock := &MockSerialDiscovery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
