// Code generated by mockery v2.9.6. DO NOT EDIT.

package logs_sender

import (
	models "github.com/openshift/assisted-service/models"
	mock "github.com/stretchr/testify/mock"
)

// MockLogsSender is an autogenerated mock type for the LogsSender type
type MockLogsSender struct {
	mock.Mock
}

// CreateFolderIfNotExist provides a mock function with given fields: folder
func (_m *MockLogsSender) CreateFolderIfNotExist(folder string) error {
	ret := _m.Called(folder)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(folder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Execute provides a mock function with given fields: command, args
func (_m *MockLogsSender) Execute(command string, args ...string) (string, string, int) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(command, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, ...string) string); ok {
		r1 = rf(command, args...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string, ...string) int); ok {
		r2 = rf(command, args...)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// ExecuteOutputToFile provides a mock function with given fields: outputFilePath, command, args
func (_m *MockLogsSender) ExecuteOutputToFile(outputFilePath string, command string, args ...string) (string, int) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, outputFilePath, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, ...string) string); ok {
		r0 = rf(outputFilePath, command, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string, ...string) int); ok {
		r1 = rf(outputFilePath, command, args...)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// ExecutePrivileged provides a mock function with given fields: command, args
func (_m *MockLogsSender) ExecutePrivileged(command string, args ...string) (string, string, int) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(command, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, ...string) string); ok {
		r1 = rf(command, args...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string, ...string) int); ok {
		r2 = rf(command, args...)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// ExecutePrivilegedToFile provides a mock function with given fields: outputFilePath, command, args
func (_m *MockLogsSender) ExecutePrivilegedToFile(outputFilePath string, command string, args ...string) (string, int) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, outputFilePath, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, ...string) string); ok {
		r0 = rf(outputFilePath, command, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string, ...string) int); ok {
		r1 = rf(outputFilePath, command, args...)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// FileUploader provides a mock function with given fields: filePath
func (_m *MockLogsSender) FileUploader(filePath string) error {
	ret := _m.Called(filePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GatherErrorLogs provides a mock function with given fields: targetDir
func (_m *MockLogsSender) GatherErrorLogs(targetDir string) error {
	ret := _m.Called(targetDir)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(targetDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GatherInstallerLogs provides a mock function with given fields: targetDir
func (_m *MockLogsSender) GatherInstallerLogs(targetDir string) error {
	ret := _m.Called(targetDir)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(targetDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogProgressReport provides a mock function with given fields: progress
func (_m *MockLogsSender) LogProgressReport(progress models.LogsState) error {
	ret := _m.Called(progress)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.LogsState) error); ok {
		r0 = rf(progress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockLogsSender interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLogsSender creates a new instance of MockLogsSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLogsSender(t mockConstructorTestingTNewMockLogsSender) *MockLogsSender {
	mock := &MockLogsSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
