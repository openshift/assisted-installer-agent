// Code generated by mockery v2.39.1. DO NOT EDIT.

package domain_resolution

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MockDomainResolutionDependencies is an autogenerated mock type for the DomainResolutionDependencies type
type MockDomainResolutionDependencies struct {
	mock.Mock
}

// ResolveCNAME provides a mock function with given fields: domain
func (_m *MockDomainResolutionDependencies) ResolveCNAME(domain string) (string, error) {
	ret := _m.Called(domain)

	if len(ret) == 0 {
		panic("no return value specified for ResolveCNAME")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(domain)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveIPs provides a mock function with given fields: domain
func (_m *MockDomainResolutionDependencies) ResolveIPs(domain string) ([]net.IP, error) {
	ret := _m.Called(domain)

	if len(ret) == 0 {
		panic("no return value specified for ResolveIPs")
	}

	var r0 []net.IP
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]net.IP, error)); ok {
		return rf(domain)
	}
	if rf, ok := ret.Get(0).(func(string) []net.IP); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IP)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockDomainResolutionDependencies creates a new instance of MockDomainResolutionDependencies. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainResolutionDependencies(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainResolutionDependencies {
	mock := &MockDomainResolutionDependencies{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
