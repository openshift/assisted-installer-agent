// Code generated by mockery v2.9.6. DO NOT EDIT.

package inventory

import (
	fs "io/fs"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockFileInfo is an autogenerated mock type for the FileInfo type
type MockFileInfo struct {
	mock.Mock
}

// IsDir provides a mock function with given fields:
func (_m *MockFileInfo) IsDir() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ModTime provides a mock function with given fields:
func (_m *MockFileInfo) ModTime() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Mode provides a mock function with given fields:
func (_m *MockFileInfo) Mode() fs.FileMode {
	ret := _m.Called()

	var r0 fs.FileMode
	if rf, ok := ret.Get(0).(func() fs.FileMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(fs.FileMode)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockFileInfo) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *MockFileInfo) Size() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Sys provides a mock function with given fields:
func (_m *MockFileInfo) Sys() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewMockFileInfo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFileInfo creates a new instance of MockFileInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFileInfo(t mockConstructorTestingTNewMockFileInfo) *MockFileInfo {
	mock := &MockFileInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
