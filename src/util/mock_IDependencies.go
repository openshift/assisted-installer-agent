// Code generated by mockery v2.39.1. DO NOT EDIT.

package util

import (
	block "github.com/jaypipes/ghw/pkg/block"
	chassis "github.com/jaypipes/ghw/pkg/chassis"

	fs "io/fs"

	gpu "github.com/jaypipes/ghw/pkg/gpu"

	memory "github.com/jaypipes/ghw/pkg/memory"

	mock "github.com/stretchr/testify/mock"

	netlink "github.com/vishvananda/netlink"

	option "github.com/jaypipes/ghw/pkg/option"

	pci "github.com/jaypipes/ghw/pkg/pci"

	product "github.com/jaypipes/ghw/pkg/product"
)

// MockIDependencies is an autogenerated mock type for the IDependencies type
type MockIDependencies struct {
	mock.Mock
}

// Abs provides a mock function with given fields: path
func (_m *MockIDependencies) Abs(path string) (string, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Abs")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Block provides a mock function with given fields: opts
func (_m *MockIDependencies) Block(opts ...*option.Option) (*block.Info, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Block")
	}

	var r0 *block.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(...*option.Option) (*block.Info, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...*option.Option) *block.Info); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.Info)
		}
	}

	if rf, ok := ret.Get(1).(func(...*option.Option) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chassis provides a mock function with given fields: opts
func (_m *MockIDependencies) Chassis(opts ...*option.Option) (*chassis.Info, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Chassis")
	}

	var r0 *chassis.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(...*option.Option) (*chassis.Info, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...*option.Option) *chassis.Info); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chassis.Info)
		}
	}

	if rf, ok := ret.Get(1).(func(...*option.Option) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvalSymlinks provides a mock function with given fields: path
func (_m *MockIDependencies) EvalSymlinks(path string) (string, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for EvalSymlinks")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Execute provides a mock function with given fields: command, args
func (_m *MockIDependencies) Execute(command string, args ...string) (string, string, int) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 string
	var r2 int
	if rf, ok := ret.Get(0).(func(string, ...string) (string, string, int)); ok {
		return rf(command, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(command, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...string) string); ok {
		r1 = rf(command, args...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, ...string) int); ok {
		r2 = rf(command, args...)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// ExecutePrivileged provides a mock function with given fields: command, args
func (_m *MockIDependencies) ExecutePrivileged(command string, args ...string) (string, string, int) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecutePrivileged")
	}

	var r0 string
	var r1 string
	var r2 int
	if rf, ok := ret.Get(0).(func(string, ...string) (string, string, int)); ok {
		return rf(command, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(command, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...string) string); ok {
		r1 = rf(command, args...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, ...string) int); ok {
		r2 = rf(command, args...)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GPU provides a mock function with given fields: opts
func (_m *MockIDependencies) GPU(opts ...*option.Option) (*gpu.Info, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GPU")
	}

	var r0 *gpu.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(...*option.Option) (*gpu.Info, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...*option.Option) *gpu.Info); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gpu.Info)
		}
	}

	if rf, ok := ret.Get(1).(func(...*option.Option) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGhwChrootRoot provides a mock function with given fields:
func (_m *MockIDependencies) GetGhwChrootRoot() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGhwChrootRoot")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Hostname provides a mock function with given fields:
func (_m *MockIDependencies) Hostname() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hostname")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interfaces provides a mock function with given fields:
func (_m *MockIDependencies) Interfaces() ([]Interface, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Interfaces")
	}

	var r0 []Interface
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Interface, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Interface)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkByName provides a mock function with given fields: name
func (_m *MockIDependencies) LinkByName(name string) (netlink.Link, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for LinkByName")
	}

	var r0 netlink.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (netlink.Link, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) netlink.Link); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(netlink.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Memory provides a mock function with given fields: opts
func (_m *MockIDependencies) Memory(opts ...*option.Option) (*memory.Info, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Memory")
	}

	var r0 *memory.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(...*option.Option) (*memory.Info, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...*option.Option) *memory.Info); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*memory.Info)
		}
	}

	if rf, ok := ret.Get(1).(func(...*option.Option) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PCI provides a mock function with given fields: opts
func (_m *MockIDependencies) PCI(opts ...*option.Option) (*pci.Info, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PCI")
	}

	var r0 *pci.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(...*option.Option) (*pci.Info, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...*option.Option) *pci.Info); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pci.Info)
		}
	}

	if rf, ok := ret.Get(1).(func(...*option.Option) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Product provides a mock function with given fields: opts
func (_m *MockIDependencies) Product(opts ...*option.Option) (*product.Info, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Product")
	}

	var r0 *product.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(...*option.Option) (*product.Info, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...*option.Option) *product.Info); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Info)
		}
	}

	if rf, ok := ret.Get(1).(func(...*option.Option) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDir provides a mock function with given fields: dirname
func (_m *MockIDependencies) ReadDir(dirname string) ([]fs.FileInfo, error) {
	ret := _m.Called(dirname)

	if len(ret) == 0 {
		panic("no return value specified for ReadDir")
	}

	var r0 []fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]fs.FileInfo, error)); ok {
		return rf(dirname)
	}
	if rf, ok := ret.Get(0).(func(string) []fs.FileInfo); ok {
		r0 = rf(dirname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dirname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFile provides a mock function with given fields: fname
func (_m *MockIDependencies) ReadFile(fname string) ([]byte, error) {
	ret := _m.Called(fname)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(fname)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(fname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RouteList provides a mock function with given fields: link, family
func (_m *MockIDependencies) RouteList(link netlink.Link, family int) ([]netlink.Route, error) {
	ret := _m.Called(link, family)

	if len(ret) == 0 {
		panic("no return value specified for RouteList")
	}

	var r0 []netlink.Route
	var r1 error
	if rf, ok := ret.Get(0).(func(netlink.Link, int) ([]netlink.Route, error)); ok {
		return rf(link, family)
	}
	if rf, ok := ret.Get(0).(func(netlink.Link, int) []netlink.Route); ok {
		r0 = rf(link, family)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]netlink.Route)
		}
	}

	if rf, ok := ret.Get(1).(func(netlink.Link, int) error); ok {
		r1 = rf(link, family)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stat provides a mock function with given fields: fname
func (_m *MockIDependencies) Stat(fname string) (fs.FileInfo, error) {
	ret := _m.Called(fname)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(fname)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(fname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIDependencies creates a new instance of MockIDependencies. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDependencies(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDependencies {
	mock := &MockIDependencies{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
